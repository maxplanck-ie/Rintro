---
title: "Intro to Data Wrangling with Dplyr"
subtitle: "David Koppstein"
format: 
  revealjs:
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/maxplanck-ie.jpg
    css: styles.css
    theme: night
editor: visual
---

## Introduction to Dplyr {auto-animate="true"}

Dplyr uses a functions that act as verbs to transform data frames in ways to facilitate data analysis.

The six main verbs are:

-   `mutate()`: creates new columns
-   `filter()`: filters rows based on criteria
-   `select()`: selects columns

::: footer
<https://maxplanck-ie.github.io/Rintro>
:::

## Introduction to Dplyr {auto-animate="true"}

Dplyr uses a functions that act as verbs to transform data frames in ways to facilitate data analysis.

The six main verbs are:

-   `summarize()`: creates summary statistics
-   `group_by()`: does analysis on subsets of the dataframe based on the contents of a column
-   `arrange()`: sorts rows

## Dplyr in action {auto-animate="true"}

```{r}
#| echo: true
library(dplyr)
library(dslabs)
data("murders")

head(murders)
```

## Dplyr in action - `mutate()` {auto-animate="true"}

```{r}
#| echo: true
library(dplyr)
library(dslabs)
data("murders")

# adding a column with mutate
murders <- mutate(murders, rate = total / population * 100000)
head(murders)
```

## Dplyr in action - `mutate()` {auto-animate="true"}

```{r}
#| echo: true
#| code-line-numbers: "6"
library(dplyr)
library(dslabs)
data("murders")

# adding a column with mutate
murders <- mutate(murders, rate = total / population * 100000)
head(murders, 2)
```

## A brief note on non-standard evaluation {auto-animate="true"}

```{r}
#| echo: true
murders <- mutate(murders, rate = total / population * 100000)
head(murders, 2)
```

Within the `mutate()` call, `total` and `population` are inferred to call `murders$total` and `murders$population` *per row*

## A brief note on non-standard evaluation {auto-animate="true"}

```{r}
#| echo: true
params <- c("total", "population")
df <- mutate(murders, rate = !!sym(params[1]) / !!sym(params[2]) * 100000)
head(df, 2)
```

This can be super confusing for people who come from traditional programming languages!

Advanced tip: use `!!` and `sym` to specify variables programatically

::: footer
<http://adv-r.had.co.nz/Computing-on-the-language.html>
:::

## Dplyr in action - `filter()` {auto-animate="true"}

```{r}
#| echo: true
# subsetting with filter
filtered_murders <- filter(murders, rate <= 0.71)
head(filtered_murders)
```

## Dplyr in action - `filter()` {auto-animate="true"}

```{r}
#| echo: true
# subsetting with filter
south_west <- c("South", "West")
filtered_murders <- filter(murders, region %in% south_west)
head(filtered_murders)
```

## Dplyr in action - `select()` {auto-animate="true"}

```{r}
#| echo: true
# selecting columns with select
new_table <- select(murders, state, region, rate)
head(new_table)
```

## Dplyr in action - `select()` {auto-animate="true"}

```{r}
#| echo: true
# selecting all columns except specified ones
new_table <- select(murders, -state, -region)
head(new_table)
```

## Dplyr in action - using the pipe {auto-animate="true"}

```{r}
#| echo: true
# using the pipe
murders %>% 
  select(state, region, rate) %>%
  filter(rate <= 0.71) %>%
  head()
```

## A note about pipes

-   Piping is shorthand to pass the output of one function as input to the next
-   `h(g(f(x)))` becomes `x %>% f() %>% g() %>% h()`
-   There are two pipes:
    -   `%>%` (from `magrittr`) - Ctrl-shift-M!
    -   `|>` (native to R, introduced in R 4.1)
-   We will use `%>%` going forward, but feel free to read about the differences and use what you need

::: footer
<https://stackoverflow.com/questions/67633022/what-are-the-differences-between-rs-new-native-pipe-and-the-magrittr-pipe>
:::

## A quick look at the data {auto-animate="true"}

```{r}
#| echo: true
# a simple scatterplot of total murders versus population
x <- murders$population / 10^6
y <- murders$total
plot(x, y)
```

## A quick look at the data {auto-animate="true"}

```{r}
#| echo: true
# a histogram of murder rates
murder_rates <- mutate(murders, rate = total / population * 100000)
hist(murder_rates$rate)
```

## A quick look at the data {auto-animate="true"}

```{r}
#| echo: true
# boxplots of murder rates by region
boxplot(rate~region, data = murder_rates)
```

## Dplyr in action - `summarize()`

```{r}
#| echo: true
murder_summary <- murder_rates %>%
  filter(region == "West") %>%
  summarize(minimum = min(rate),
            median = median(rate),
            maximum = max(rate))
murder_summary
```

## Dplyr in action - `summarize()`

```{r}
#| echo: true
murder_summary <- murder_rates %>%
  filter(region == "West") %>%
  summarize(minimum = min(rate),
            median = median(rate),
            maximum = max(rate))
murder_summary
```

## Quick exercise {auto-animate="true"}

What is the average murder rate in the United States?

## Quick exercise {auto-animate="true"}

What is the average murder rate in the United States?

```{r}
#| echo: true
# average rate unadjusted by population size
mean(murders$rate)
```

## Quick exercise {auto-animate="true"}

What is the average murder rate in the United States?

```{r}
#| echo: true
# average rate adjusted by population size
us_murder_rate <- murders %>% 
  summarize(rate = sum(total) / sum(population) * 10^5)
us_murder_rate
```

## `pull()` in action

We can also use `pull` to return the numerical value of a given column directly.

```{r}
#| echo: true
# average rate adjusted by population size
us_murder_rate <- murders %>% 
  summarize(rate = sum(total) / sum(population) * 10^5) %>%
  pull(rate)
us_murder_rate
```

## The dot placeholder {auto-animate="true"}

Another way to access the rate column directly is to use the dot placeholder:

`.`

This is a feature of the `magrittr` pipe `%>%`, and allows passing the previously piped value to the next function at the specific location specified rather than as the first value as usual.

NB: In R4.2, the `|>` operator uses `_` instead of `.` Use this going forward!

## The dot placeholder {auto-animate="true"}

```{r}
#| echo: true
# average rate adjusted by population size
us_murder_rate <- murders %>% 
  summarize(rate = sum(total) / sum(population) * 10^5) %>%
  .$rate
us_murder_rate
```

## Using the dot place holder for formulas

```{r}
#| echo: true

fit <- mtcars %>%
	lm(mpg ~ disp, data = .)

plot(mtcars$disp, mtcars$mpg)
abline(fit, col = "red")
```

## Group then summarize {auto-animate="true"}

![](images/groupby.png)

## Group then summarize {auto-animate="true"}

```{r}
#| echo: true
# group by region
murders %>% group_by(region)
```

## Group then summarize {auto-animate="true"}

```{r}
#| echo: true
# summarize after grouping
murders %>% 
  group_by(region) %>%
  summarize(median = median(rate))
```

## `arrange()` in action {auto-animate="true"}

```{r}
#| echo: true
murders <- mutate(murders, rate = total / population * 10^5)
```

## `arrange()` in action {auto-animate="true"}

```{r}
#| echo: true
murders <- mutate(murders, rate = total / population * 10^5)

# order the states by population size
murders %>% arrange(population) %>% head()
```

## `arrange()` in action {auto-animate="true"}

```{r}
#| echo: true
murders <- mutate(murders, rate = total / population * 10^5)

# order the states by murder rate - the default is ascending order
murders %>% arrange(rate) %>% head()
```

## `arrange()` in action {auto-animate="true"}

```{r}
#| echo: true
murders <- mutate(murders, rate = total / population * 10^5)

# order the states by region and then by murder rate within region
murders %>% arrange(region, rate)
```

## `arrange()` in action {auto-animate="true"}

```{r}
#| echo: true
murders <- mutate(murders, rate = total / population * 10^5)

# order the states by murder rate in descending order
murders %>% arrange(desc(rate)) %>% head()
```

Side note 1: You can also use the `slice_max` function
Side note 2: Why would Washington DC have a much higher murder rate than all the other states?

## Exercises with gapminder

-   The `gapminder` dataset was developed by Hans Rosling, a famous sociologist and health expert, to help visualize global socioeconomic data

```{r}
#| echo: true
data(gapminder)
head(gapminder, 3)
```

## Which five countries have the highest population in 2012? {auto-animate="true"}

Store it in a vector.

## Which five countries have the highest population in 2012? {auto-animate="true"}

Store it in a vector.

```{r}
#| echo: true
top5_countries <- gapminder %>%
  filter(year == 2012) %>% 
  arrange(desc(population)) %>% 
  head(5) %>%
  pull(country)
top5_countries
```

## What is the approximate daily income (~gdp per person per day) for a German person in 1989? {auto-animate="true"}

## What is the approximate daily income (~gdp per person per day) for a German person in 1989? {auto-animate="true"}

```{r}
#| echo: true
gapminder %>%
  filter(country == "Germany", year == 1989) %>%
  mutate(dollars_per_day = gdp/population/365) %>%
  pull()
```

## Rank the following countries based on their infant mortality rate in 2012. {auto-animate="true"}

Turkey, Argentina, South Korea, Georgia, Thailand, Australia

## Rank the following countries based on their infant mortality rate in 2012. {auto-animate="true"}

Turkey, Argentina, South Korea, Georgia, Thailand, Australia

```{r}
#| echo: true
gapminder %>%
  filter(year==2012, country %in% c("Turkey", "Argentina", "South Korea", "Georgia", "Thailand", "Australia")) %>%
  arrange(infant_mortality) %>%
  select(country, infant_mortality)
```

## What are the six regions with lowest median life expectancy between 2000-2009? {auto-animate="true"}

Calculate them and return a sorted vector. 

## What are the six regions with lowest median life expectancy between 2000-2009? {auto-animate="true"}

Calculate them and return a sorted vector. 

```{r}
#| echo: true
gapminder %>%
  filter(year %in% 2000:2009) %>%
  group_by(region) %>%
  summarise(med_life_exp = median(life_expectancy)) %>%
  arrange(med_life_exp) %>%
  head(6)
```

## The tip of the iceberg

![](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)

For more, see this handy cheatsheet!

![](images/dplyr_cheat_sheet.png){fig-align="center"}

::: footer
<https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf>
:::

## Any questions?

Next, we will learn about data visualization techniques with ggplot2.
