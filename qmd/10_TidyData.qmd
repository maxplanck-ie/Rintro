---
title: "10: Tidy Data"
author: "Juan Caballero"
---

```{r, child="_setup.qmd"}
```

## Our dataset

```{r}
#| echo: true
library(tidyverse)

rnaseq_file = "https://raw.githubusercontent.com/maxplanck-ie/Rintro/2024.04/qmd/data/rnaseq.csv"

rna = read_csv(rnaseq_file)

rna 

```

## What is Tidy Data? 

- In tidy data, each row is an observation and each column is a different variable (*long-format*). 
- In wide data, each row contains several observations, and the columns contain values (*wide-format*). 

![](images/tidy_data.png)

::: footer 
<https://maxplanck-ie.github.io/Rintro>
:::

## The data 

Look into the data structure, what is this?

```{r}
#| echo: true

rna %>%
  arrange(gene)

```

## But I want a more human readable table ...

First, extract only the important values:

```{r}
#| echo: true

rna_exp = rna %>%
  select(gene, sample, expression)

rna_exp

```

## Dplyr in action - `pivot_wider()` {auto-animate="true"}

`pivot_wider()` can transform long-format to wide-format.

It takes three main arguments:

1. the `data` to be transformed

2. the `names_from` are the column whose values will become new column names

3. the `values_from` are the column whose values will fill the new columns

## Dplyr in action - `pivot_wider()` {auto-animate="true"}

```{r}
#| echo: true

rna_wide = rna_exp %>%
  pivot_wider(names_from = sample,
              values_from = expression)

rna_wide

```

## Dplyr in action - `pivot_wider()` {auto-animate="true"}

![](images/pivot_wider.png)

## Dplyr in action - `pivot_wider()` {auto-animate="true"}

By default, missing values will be converted to `NA`, we can change it with `values_fill`

```{r}
#| echo: true

rna_wide_noNAs = rna_exp %>%
  pivot_wider(names_from = sample,
              values_from = expression,
              values_fill = 0)

rna_wide_noNAs

```

## Dplyr in action - `pivot_longer()` {auto-animate="true"}

The opposite operation is `pivot_longer()`, it takes similar inputs:

1. the `data` to be transformed;
2. the `names_to` the new column name we wish to create and populate with the current column names;
3. the `values_to` the new column name we wish to create and populate with current values;
4. the names of the columns to be used to populate the `names_to` and `values_to` variables (or to drop with `-`).

## Dplyr in action - `pivot_longer()` {auto-animate="true"}

```{r}
#| echo: true

rna_long = rna_wide %>%
    pivot_longer(names_to = "sample",
                 values_to = "expression",
                 -gene)

rna_long

```

## Dplyr in action - `pivot_wider()` {auto-animate="true"}

![](images/pivot_longer.png)

## Dplyr in action - `pivot_longer()` {auto-animate="true"}

Column selection can be defined with patterns or ranges

```{r}
#| echo: true

rna_wide %>%
    pivot_longer(names_to = "sample",
                 values_to = "expression",
                 cols = starts_with("GSM"))

```

## Dplyr in action - `pivot_longer()` {auto-animate="true"}

Column selection can be defined with patterns or ranges

```{r}
#| echo: true

rna_wide %>%
    pivot_longer(names_to = "sample",
                 values_to = "expression",
                 GSM2545336:GSM2545380)

```

## Hands on {auto-animate="true"}

1. Starting from the `rna` table, use the `pivot_wider()` function to create a wide-format table giving the gene expression levels in each mouse.

2. Use the `rna` dataset to create an expression matrix where each row represents the mean expression levels of genes and columns represent the different timepoints.

## Hands on {auto-animate="true"}

1. Starting from the `rna` table, use the `pivot_wider()` function to create a wide-format table giving the gene expression levels in each mouse.

```{r}
#| echo: true

rna_bymouse = rna %>%
  select(gene, mouse, expression) %>%
  pivot_wider(names_from = mouse, values_from = expression)

rna_bymouse

```

## Hands on {auto-animate="true"}

2. Use the `rna` dataset to create an expression matrix where each row represents the mean expression levels of genes and columns represent the different timepoints.

```{r}
#| echo: true

rna_time = rna %>%
  group_by(gene, time) %>%
  summarise(mean_exp = mean(expression)) %>%
  pivot_wider(names_from = time,
              values_from = mean_exp)

rna_time

```

## Dplyr in action - combining tables {auto-animate="true"}

Dplyr can also merge tables with the basic table operations:

1. An `inner_join` keeps observations that are present in both tables

2. A `left_join` keeps observations that are present in the left (first) table, dropping those that are only present in the other

3. A `right_join` keeps observations that are present in the right (second) table, dropping those that are only present in the other

4. A `full_join` keeps all observations

## Dplyr in action - combining tables {auto-animate="true"}

![](images/join-inner.png)
![](images/join-outer.png)

::: footer
<https://carpentries-incubator.github.io/bioc-intro/30-dplyr.html>
:::

## Dplyr in action - combining tables {auto-animate="true"}

As an example, let's subset a part of the `rna` table

```{r}
#| echo: true

rna_mini <- rna %>%
   select(gene, sample, expression) %>%
   head(10)

rna_mini

```

## Dplyr in action - combining tables {auto-animate="true"}

Load the annotation table

```{r}
#| echo: true

annot_file = "https://raw.githubusercontent.com/maxplanck-ie/Rintro/2024.04/qmd/data/annot1.csv"

annot = read_csv(annot_file)

annot

```

## Dplyr in action - combining tables {auto-animate="true"}

Combine `rna_mini` with `annot`

```{r}
#| echo: true

full_join(rna_mini, annot)

```

## Dplyr in action - combining tables {auto-animate="true"}

Note: both tables are compared in terms of variables, only matching variables are used to merge, in our case, both tables have a common column `gene`

In case the names don't match, we need to define specific variables names for merging

```{r}
#| echo: true

full_join(rna_mini, annot, by = c("gene" = "gene_symbol"))

```

## Dplyr in action - `write_csv` {auto-animate="true"}

Finally, we could need to save our data as a new file for later use or sharing, we can use `write_csv()`

```{r}
#| echo: true

write_csv(rna_wide, file = "rna_wide.csv")

```



## Any questions?

![](images/complaining-data-science-data-science.jpg)

::: footer
<https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf>
:::



