---
title: "01: First Steps"
author: "Thomas Manke"
categories:
  - vectors
  - indexing
---

# Create R project
**Best practice:**   
Each R project should have their dedicated directory. This directory will hold code, data, results etc.

**Task**: Open a new project with "File > New Project ..."

Notice the following distinction:

- When running Rstudio locally, the project directory will reside on your **local** computer.
- When accessing a web server, the project directory will also be on that server.

**Task**: Familiarize yourself with the layout and the various panels in Rstudio. 

**Query**: Utilization: https://pollev.com/thomasmanke101

# Console and Commands

For now, the most important panel is the so-called "Console" with the prompt (">"). 

This is where the first interactions with the R-software will take place. 

The other panels are for: output, help and other information.

**Task**: In the Console try to repeat and understand the following operations
```{r console}
2+2
2^3        # This is a comment: try also 2**3
1+2+3/6    # beware of precedence rules
sqrt(2)    # functions
sin(pi/2)  # functions and built-in constants

# Special values
1/0        # R knows infinity! Try 1/Inf and 1/inf
0/0        # Not a number!     Try sqrt(-1)
```

# Command History
All R-commands are tracked in a *history*. It maybe accessed using the cursors (or the history panel in RStudio). This is extremely useful to navigate to previous commands, repeat them, or change them slightly.

**Task**: Using the history, determine $\sqrt 3$.

# First help
There are various different ways to get help
```{r help, eval=FALSE}
?sin
```

Use help to find out more about: sqrt, exp or anything else of interest.

# Community help
* online courses: http://software-carpentry.org/lessons, Coursera, Udacity, ...
* bootcamp: https://github.com/jknowles/r_tutorial_ed
* QuickR: http://www.statmethods.net 
* http://stackoverflow.com, http://www.r-bloggers.com/


# SessionInfo
Every language operates in a certain context and is context-dependent.

Software depends on other software and packages.

It is important to be aware of those (often complex) dependencies.

One way to communicate this context is with the output from sessionInfo().

```{r sessionInfo}
sessionInfo()
```

****

# Assigning values to objects

**Goal**: store results of computation in new variables
```{r simple_obejcts}
x <- 2*pi # pre-defined constant pi
x         # see value of object x = show(x) 

x < -2    # Careful: what's going on here?
x

x = 2  # "=" as in most other languages.  
x      # x was overwritten

x==3   # another logical comparison (x unchanged)

x+x    # passing objects to functions (+)
```


**Task**: look at the following objects and understand the differences
```{r more_obejects, eval=FALSE, echo=TRUE}
pi 
hi
"hi"
```

****

# Simple Vectors
Vectors illustrate how complex data structures can be built from smaller blocks. 
Here we learn how to create and inspect vectors.
```{r vectors}
v=c(1,2)            # combine arguments into vector
v                   # display v

# functions for vectors
str(v)              # structure of v (especially useful for long and structured objects)
typeof(v)           # type of v ( ~ storage mode)
class(v)            # class of v (determines how certain functions will work with v)
length(v)
sum(v)
summary(v)
```
# Accessing Vectors
Frequently we need to access specific elements from a vector
```{r access}
v[1]
```

**Task**:  access the following vector elements: v[1], v[2], v[3], v[1:3], v[-1]

# Vector Generation
```{r vector_generation}
v=c(1,2,3,4,5)    # combining many elements can get cumbersome
v=1:5             # more efficient

v=seq(from=1, to=5, by=1) # same as before but more flexibilty
v=seq(1,5,0.5)            # short-hand defaults
```

**Tasks**: 

- Explore the seq() function and inspect other parameter options. 
- Create a vector with 5 numbers equally spaced from +2 to -1.9

```{r, echo=FALSE}
v=seq(2,-1.9,length.out=5)
v
```

**Task**: Understand the difference between the two vectors v1 and v2
```{r, eval=FALSE}
v1=1:10-1
v2=1:(10-1)
```


# Vector Operations
```{r eval=FALSE}
v1=1:3      # = c(1,2,3)
v2=rep(2,3) # = c(2,2,2)

v1+v2      # elementwise addition
v1*v2      # ... multiplication
v1 > v2    # ... comparisons
v1 %*% v2  # scalar product
```

**Task**: Define your own vectors and explore some numerical operations

# Misc: Concepts and Pecularities
```{r misc, eval=FALSE}
v=1:4                    # Vector Definition

v + 10                   # Recycling
v + c(10,20)             # Recycling
v + c(10,20,30)          # Warning != Error

#v %*% c(10,20,30)        # Error = Error

letters                  # built-in vector. Try LETTERS 
typeof(letters)          # there is more than numbers

names(v)=letters[1:4]    # naming of vector elements (for convenience)
v["b"]                   # index by name

rev(v)                   # reverse vectors
```

****

# Learning Curve:
* Rstudio: Starting an R project
* work with console 
* simple functions (input, output), logical operations and parameters
* creating simple objects and assigning values
* inspecting objects: v, str(v), typeof(v), length(v)
* flexible creation of vectors
* vector indices and subsetting
* vector operations and recycling
* special values: Inf, NaN, NA
* functions can behave differently on different input: summary()
* see warning messages and errors
* getting help: ?sqrt
* software dependencies and the importance of sesssionInfo()
